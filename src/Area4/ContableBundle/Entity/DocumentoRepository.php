<?php

namespace Area4\ContableBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DocumentoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentoRepository extends EntityRepository {

	/**
	 * Busca la ultimo documento del tipo y responsable tal,
	 * si algun campo es null,se buscapor el otro.
	 * @param Tipo $tipo
	 * @param \Area4\UsuarioBundle\Entity\Usuario $responsable
	 * @return \Area4\ContableBundle\Entity\Documento
	 */
	public function BuscarUltima($tipo = null, $responsable = null) {
		$qry = $this->createQueryBuilder('d');
		if (!\is_null($tipo)) {
			$qry->andWhere('d.tipo = :tipo')
							->setParameter('tipo', $tipo); //->getId());
		}
		if (!\is_null($responsable)) {
			$qry->andWhere('d.Responsable = :resp')
							->setParameter('resp', $responsable); //->getId())
			//->setMaxResults(1);
		}
		$doc = $qry->orderBy('d.numero', 'Desc')
						->setMaxResults(1)
						->getQuery()
						->getOneOrNullResult();


		return $doc;
	}

	/**
	 *    Busca la ultimo Pedido y que sea imcompleta, si no exite la crea
	 * @param \Area4\UsuarioBundle\Entity\Usuario $Usuario
	 * @return \Area4\ContableBundle\Entity\Documento
	 *
	 */
	public function getPedidoIncompleta($Usuario) {
		$em	 = $this->getEntityManager();
		$tipo = $em->getRepository('Area4ContableBundle:Tipo')->find(1);
		$doc	= $this->buscarPedidoIncompleto($Usuario);
		/**
		 * Si la factura esta cerrada, no sela puede usar
		 */
		if (\is_null($doc) || $doc->getEstado() > 0) {
			$doc = $this->crearDocumento($tipo);
			$doc->setResponsable($Usuario);
			$em->persist($doc);
			$em->flush();
		}

		return $doc;
	}

	/**
	 * Busca el ultimo pedido Incompleto
	 * @param \Area4\UsuarioBundle\Entity\Usuario $Usuario
	 * @return \Area4\ContableBundle\Entity\Documento o null si no existe
	 */
	public function buscarPedidoIncompleto($Usuario) {
		$em	 = $this->getEntityManager();
		$tipo = $em->getRepository('Area4ContableBundle:Tipo')->find(1);
		/* @var $tipo \Area4\ContableBundle\Entity\Tipo */
		$doc	= $this->BuscarUltima($tipo, $Usuario);
		return $doc;
	}

	/**
	 * Crea un nuevo documento con ese tipo y guarda
	 * @param \Area4\ContableBundle\Entity\Tipo $tipo
	 * @param \Area4\UsuarioBundle\Entity\Usuario $user  Usuario que crea el Documento
	 * @return \Area4\ContableBundle\Entity\Documento
	 */
	public function crearDocumento($tipo, $user=null) {
		$em = $this->getEntityManager();
		$doc = new \Area4\ContableBundle\Entity\Documento();
		$doc->setTipo($tipo);
		$doc->setNumero($tipo->getUltimo() + 1);
		$tipo->setUltimo($doc->getNumero());
		$doc->setFecha(new \DateTime());
		$doc->setTotal(0);
		if(!\is_null($user)){
			$doc->setCreatedAt(new \DateTime('now'));
			$doc->setUpdateAt(new \DateTime('now'));
		}
		$em->persist($tipo);
		$em->persist($doc);
		$em->flush();
		return $doc;
	}

	/**
	 * Crea una lista de documentos buscados por usuario o numero
	 * @param type $q
	 */
	public function buscar($q) {
		$qy = $this->createQueryBuilder('d');
		if (\is_numeric($q)) {
			$qy->where('d.numero = :q');
			$qy->setParameter('q', $q);
		} else {
			$qy->join('d.responsable', 'c')
							->where('c.nombre like :q')
							->setParameter('q', "%$q%");
		}
		return $qy->getQuery()->execute();
	}

	/**
	 * Query base de documentos ordenadospor fecha desendente
	 * @return \Doctrine\ORM\QueryBuilder
	 */
	public function QryBase() {
		$qry = $this->createQueryBuilder('d')
						->orderBy('d.created_at', 'DESC');
		return $qry;
	}

	/**
	 *
	 * @param type $tipo
	 * @return
	 */
	public function findByTipo($tipo) {
		$qry = $this->QryBase()
						->andWhere('d.tipo = :tipo')
						->setParameter('tipo', $tipo);
		return $qry->getQuery()->execute();
	}

}