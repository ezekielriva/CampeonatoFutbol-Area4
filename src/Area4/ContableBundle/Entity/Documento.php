<?php

namespace Area4\ContableBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use DateTime;

/**
 * Area4\ContableBundle\Entity\Documento
 *
 * @ORM\Table(name="contable_Documento", uniqueConstraints={@ORM\UniqueConstraint(name="doc_unico", columns={"tipo_id", "numero"})})
 * @ORM\Entity(repositoryClass="Area4\ContableBundle\Entity\DocumentoRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Documento {

    /**
     * Contine los estados de un documento
     *
     * @var string
     **/
    public static $estados = array(
        2 => 'CANCELADA',
        3 => 'FINALIZADA',
        );

    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    /**
     * @ORM\Column(name="numero", type="integer")
     **/
    private $numero;
    /**
     * @ORM\ManyToOne(targetEntity="Tipo")
     * @ORM:JoinColumn(name="tipo_id", referencedColumnName="id",cascade={"persist"})
     * Tipo de documento
     * Ejemplos: 
     *  1. Factura.
     *  2. Nota de Pedido.
     *  3. Remito.
     *  4. Ticket. Factura sin cliente
     */
    private $tipo;
    /**
     * @var date $fecha
     *
     * @ORM\Column(name="fecha", type="date")
     */
    private $fecha;
    /**
     * @var datetime $created_at
     *
     * @ORM\Column(name="created_at", type="datetime")
     */
    private $created_at;
    /**
     * @var datetime $update_at
     *
     * @ORM\Column(name="updated_at", type="datetime")
     */
    private $updated_at;
    /**
     * @var Cliente $Cliente
     * @ORM\ManyToOne(targetEntity="Cliente", inversedBy="Documento")
     * @ORM\JoinColumn(name="Cliente_id", referencedColumnName="id")
     */
    private $Cliente;
    /**
     * @var float $total
     *
     * @ORM\Column(name="total", type="float")
     */
    private $total;
    /**
     * @ORM\OneToMany(targetEntity="LineadeDocumento", mappedBy="documento",cascade={"persist", "remove"})
     */
    private $lineadeDocumento;
    /**
     * @ORM\Column(name="estado", type="integer")
     */
    private $estado;

    /**
     * Get numero
     *
     * @return integer
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set numero
     *
     * @param integer $numero
     */
    public function setNumero($numero) {
        $this->numero = $numero;
    }
    /**
     * Set numero autogenerated
     *
     * @param integer $numero
     */
    public function setNumeroAuto() {
        $this->numero = $this->tipo->getUltimo() + 1;
    }

    /**
     * Get numero
     *
     * @return integer
     */
    public function getNumero() {
        $cad = str_pad($this->numero, 12, "0", STR_PAD_LEFT);
        return $cad;
    }

    /**
     * Set fecha
     *
     * @param date $fecha
     */
    public function setFecha($fecha) {
        $this->fecha = $fecha;
    }

    /**
     * Get fecha
     *
     * @return date
     */
    public function getFecha() {
        return $this->fecha;
    }

    /**
     * Set created_at
     *
     * @param datetime $createdAt
     */
    public function setCreatedAt($createdAt) {
        $this->created_at = $createdAt;
    }

    /**
     * Get created_at
     *
     * @return datetime
     */
    public function getCreatedAt() {
        return $this->created_at;
    }

    /**
     * Set update_at
     *
     * @param datetime $updateAt
     */
    public function setUpdateAt($updateAt) {
        $this->updated_at = $updateAt;
    }

    /**
     * Get update_at
     *
     * @return datetime
     */
    public function getUpdateAt() {
        return $this->updated_at;
    }

    /**
     * Set total
     *
     * @param float $total
     */
    public function setTotal($total) {
        $this->total = $total;
    }

    /**
     * Get total
     *
     * @return float
     */
    public function getTotal() {
        return $this->total;
    }

    /**
     * Set tipo
     *
     * @param Area4\ContableBundle\Entity\Tipo $tipo
     */
    public function setTipo(\Area4\ContableBundle\Entity\Tipo $tipo) {
        $this->tipo = $tipo;
    }

    /**
     * Get tipo
     *
     * @return Area4\ContableBundle\Entity\Tipo
     */
    public function getTipo() {
        return $this->tipo;
    }

    /**
     *
     * @param \Area4\ContableBundle\Entity\Tipo $tipo
     */
    public function __construct($tipo = null) {
        if (!\is_null($tipo)) {
            $this->setTipo($tipo);
            $this->setNumero($tipo->numSig());
        }
        $this->estado = 1;
        $this->lineadeDocumento = new \Doctrine\Common\Collections\ArrayCollection();
        $this->setFecha(new \DateTime());
        $this->total = 0;
    }

    /**
     * Add lineadeDocumento
     *
     * @param Area4\ContableBundle\Entity\lineadeDocumento $lineadeDocumento
     */
    public function addlineadeDocumento(\Area4\ContableBundle\Entity\lineadeDocumento $lineadeDocumento) {
        $this->lineadeDocumento[] = $lineadeDocumento;
    }

    /**
     * Get lineadeDocumento
     *
     * @return Doctrine\Common\Collections\Collection
     */
    public function getlineadeDocumento() {
        return $this->lineadeDocumento;
    }

    /**
     * Get lineadeDocumento
     * Solos los lineadeDocumento donde la cantidad es mayor a 0
     * @return Doctrine\Common\Collections\Collection
     */
    public function getlineadeDocumentoC() {
        $ar = array();
        $value = new \Area4\ContableBundle\Entity\lineadeDocumento();
        foreach ($this->lineadeDocumento as $value) {
            if ($value->getCantidad() > 0) {
                $ar[] = $value;
            }
        }
        return $ar;
    }

    /**
     *
     * @param \Area4\ContableBundle\Entity\Producto $producto
     * @param float $cantidad
     * @param float $precio
     * @param \Area4\UsuarioBundle\Entity\Usuario $sf2user
     * @return \Area4\ContableBundle\Entity\lineadeDocumento
     */
    public function addProducto($producto, $cantidad, $precio, $sf2user) {
        $item = new \Area4\ContableBundle\Entity\lineadeDocumento();
        $item->setProducto($producto);
        $item->setDocumento($this);
        $item->setCantidad($cantidad);
        $item->setCreatedAt(new \DateTime());
        $item->setPrecioU($precio);
        $item->setCreatedBy($sf2user);
        $item->setUpdatedAt($item->getCreatedAt());
        $item->setUpdatedBy($sf2user);
        $item->setPrecioT($cantidad * $precio);
        $this->setTotal($this->getTotal() + $item->getPrecioT());
        $this->addlineadeDocumento($item);
        return $item;
    }

    /**
     * @ORM\prePersist
     *
     */
    public function prePersist() {
//		$this->setCreatedAt(new \DateTime("now"));
//		$this->setUpdateAt(new \DateTime("now"));
        $this->created_at = new DateTime("now");
        $this->updated_at = new DateTime("now");
    }

    /**
     * @ORM\preUpdate
     */
    public function preUpdate() {
        //	$this->setCreatedAt(new \DateTime());
        $this->updated_at = new DateTime("now");
//		$this->setUpdateAt(new \DateTime("now"));
    }

    public function carencia() {
        $max = 0;
        $value = new \Area4\ContableBundle\Entity\lineadeDocumento();
        foreach ($this->getlineadeDocumento() as $value) {
            if ($max < $value->getProducto()->getCarencia())
                $max = $value->getProducto()->getCarencia();
        }
        return $max;
    }

    /**
     * Set estado
     *
     * @param integer $estado
     */
    public function setEstado($estado) {
        $this->estado = $estado;
    }

    /**
     * Get estado
     *
     * @return integer
     */
    public function getEstado() {
        return $this->estado;
    }

    /**
     * Hace todos los calculos para generar la factura final
     * @return \Area4\ContableBundle\Entity\lineadeDocumento retorna el item que tiene problemas de cantidad
     * sino hay problema retorna null;
     */
    public function cerrar() {

        if ($this->getTipo()->getStock() != 0) {
            $value = new \Area4\ContableBundle\Entity\lineadeDocumento();
            foreach ($this->getlineadeDocumento() as $value) {
                //Cambiar el STOCK
                if ($value->getProducto()->getCantidad() > 0) {
                    $cantidad0 = $value->getProducto()->getCantidad();
                    $cantidad0 -= $value->getCantidad() * $this->getTipo()->getStock();
                    if ($cantidad0 < 0) {
                        return $value;
                    } else {
                        $value->getProducto()->setCantidad($cantidad0);
                    }
                }
            }
        }
        /*
         * CAmbia elestado y la fecha deldocumento
         */
        $this->calcularTotal();
        $this->setEstado(1);
        $this->setFecha(new \DateTime('now'));
        return null;
    }

    public function __toString() {
        return $this->getTipo()->getLetra() . "-" . $this->getNumero();
    }

    /**
     * Calcula el total del documento
     */
    public function calcularTotal() {
        $total = 0;
        foreach ($this->lineadeDocumento as $linea) {
            $total += $linea->getPrecioT();
        }
        $this->total = $total;
    }

    public function __toString2() {
        return $this->getTipo()->getNombre() . ": " . $this->getNumero();
    }

    /**
     * Set updated_at
     *
     * @param datetime $updatedAt
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updated_at = $updatedAt;
    }

    /**
     * Get updated_at
     *
     * @return datetime 
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Obtiene el String del estado correspondiente
     *
     * @return string
     * @author ezekiel
     **/
    public function getEstadotoString()
    {
        switch ($this->estado) {
            case '2':
                return $this->estados[2];
                break;
            
            default:
                return 'Cargandose';
                break;
        }
    }

    /**
     * Get - Cliente
     *
     * @return Cliente
     * @author ezekiel
     **/
    public function getCliente()
    {
        return $this->Cliente;
    }

    /**
     * Set - Cliente
     *
     * @author ezekiel
     **/
    public function setCliente($cliente)
    {
        $this->Cliente = $cliente;
    }
}